
//Higher order functions


def halfMaker(value: Int): Double = value.toDouble/2

def addFive(value: Int): Int = value+5

def processRange(start: Int, finish: Int, processor: Int => AnyVal): Unit = {
       for (i <- start to finish)
       println(processor(i))
      }

Example:-

processRange(1,3,halfMaker)
0.5
1.0
1.5

/****************************************************************/

scala> class Person(val name: String, val age: Int) {
        override def toString = s"$name ($age)"
      }
defined class Person
scala> def underagePeopleNames(persons: List[Person]) = {
        for (person <- persons; if person.age < 18)
          yield person.name
      }
underagePeopleNames: (persons: List[Person])List[String]
scala> def createRandomPeople() = {
        val names = List("Alice", "Bob", "Carol",
            "Dave", "Eve", "Frank")
        for (name <- names) yield {
          val age = (Random.nextGaussian()*8 + 20).toInt
          new Person(name, age)
        }
      }
	  
createRandomPeople: ()List[Person]
scala> val people = createRandomPeople()
people: List[Person] = List(Alice (16), Bob (16), Carol (19), Dave (18), Eve (26), Frank (11))
scala> underagePeopleNames(people)
res1: List[String] = List(Alice, Bob, Frank)